/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.29).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package cl.nissum.register.api.controller;



import cl.nissum.register.api.swagger.model.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;


@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-10-24T22:11:56.183Z[GMT]")
@Validated
public interface UserApi {

    @Operation(summary = "User requires to register", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "register" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation- user registered", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CreateUserResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = EmptyDataResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = EmptyDataResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = EmptyDataResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = EmptyDataResponse.class))) })
    @RequestMapping(value = "/user/register",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<CreateUserResponse> registerUser(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody UserRequest body);

    @Operation(summary = "User requires to register", description = "", security = {
            @SecurityRequirement(name = "bearerAuth")    }, tags={ "register" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "successful operation- user registered", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CreateUserResponse.class))),

            @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = EmptyDataResponse.class))),

            @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = EmptyDataResponse.class))),

            @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = EmptyDataResponse.class))),

            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = EmptyDataResponse.class))) })
    @RequestMapping(value = "/user/search-user",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<FindUserResponse> findUser(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody FindUserRequest body);


    @Operation(summary = "User requires to register", description = "", security = {
            @SecurityRequirement(name = "bearerAuth")    }, tags={ "register" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "successful operation- user registered", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PassportToken.class))),

            @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = EmptyDataResponse.class))),

            @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = EmptyDataResponse.class))),

            @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = EmptyDataResponse.class))),

            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = EmptyDataResponse.class))) })

    @RequestMapping(value = "/user/passport",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<PassportToken> passport(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody PassportUser body);

}

